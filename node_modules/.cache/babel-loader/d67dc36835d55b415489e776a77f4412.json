{"ast":null,"code":"// Used https://github.com/thinkloop/multi-key-cache as inspiration\nvar multiKeyStore = {\n  set: function set(cache, key1, key2, value) {\n    var subCache = cache.get(key1);\n\n    if (!subCache) {\n      subCache = new Map();\n      cache.set(key1, subCache);\n    }\n\n    subCache.set(key2, value);\n  },\n  get: function get(cache, key1, key2) {\n    var subCache = cache.get(key1);\n    return subCache ? subCache.get(key2) : undefined;\n  },\n  delete: function _delete(cache, key1, key2) {\n    var subCache = cache.get(key1);\n    subCache.delete(key2);\n  }\n};\nexport default multiKeyStore;","map":{"version":3,"sources":["D:/Ava/Material/material-ui-tut-lesson-2/node_modules/@mui/styles/makeStyles/multiKeyStore.js"],"names":["multiKeyStore","set","cache","key1","key2","value","subCache","get","Map","undefined","delete"],"mappings":"AAAA;AAEA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,aAACC,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAoBC,KAApB,EAA8B;AACjC,QAAIC,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAUJ,IAAV,CAAf;;AACA,QAAI,CAACG,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAG,IAAIE,GAAJ,EAAX;AACAN,MAAAA,KAAK,CAACD,GAAN,CAAUE,IAAV,EAAgBG,QAAhB;AACD;;AACDA,IAAAA,QAAQ,CAACL,GAAT,CAAaG,IAAb,EAAmBC,KAAnB;AACD,GARmB;AASpBE,EAAAA,GAAG,EAAE,aAACL,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAuB;AAC1B,QAAME,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAUJ,IAAV,CAAjB;AACA,WAAOG,QAAQ,GAAGA,QAAQ,CAACC,GAAT,CAAaH,IAAb,CAAH,GAAwBK,SAAvC;AACD,GAZmB;AAapBC,EAAAA,MAAM,EAAE,iBAACR,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAuB;AAC7B,QAAME,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAUJ,IAAV,CAAjB;AACAG,IAAAA,QAAQ,CAACI,MAAT,CAAgBN,IAAhB;AACD;AAhBmB,CAAtB;AAkBA,eAAeJ,aAAf","sourcesContent":["// Used https://github.com/thinkloop/multi-key-cache as inspiration\n\nconst multiKeyStore = {\n  set: (cache, key1, key2, value) => {\n    let subCache = cache.get(key1);\n    if (!subCache) {\n      subCache = new Map();\n      cache.set(key1, subCache);\n    }\n    subCache.set(key2, value);\n  },\n  get: (cache, key1, key2) => {\n    const subCache = cache.get(key1);\n    return subCache ? subCache.get(key2) : undefined;\n  },\n  delete: (cache, key1, key2) => {\n    const subCache = cache.get(key1);\n    subCache.delete(key2);\n  }\n};\nexport default multiKeyStore;"]},"metadata":{},"sourceType":"module"}